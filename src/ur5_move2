/*********************************************************************
 * Software License Agreement (BSD License)
 *
 *  Copyright (c) 2013, SRI International
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above
 *     copyright notice, this list of conditions and the following
 *     disclaimer in the documentation and/or other materials provided
 *     with the distribution.
 *   * Neither the name of SRI International nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 *  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 *  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 *  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 *  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 *********************************************************************/

/* Author: Sachin Chitta, Dave Coleman, Mike Lautman */

#include <moveit/move_group_interface/move_group_interface.h>
#include <moveit/planning_scene_interface/planning_scene_interface.h>

#include <moveit_msgs/DisplayRobotState.h>
#include <moveit_msgs/DisplayTrajectory.h>

#include <moveit_msgs/AttachedCollisionObject.h>
#include <moveit_msgs/CollisionObject.h>

#include <moveit_visual_tools/moveit_visual_tools.h>


void Move_ur5(const geometry_msgs::PointConstPtr& Centroid){
    std::cout << "MOVE!" << std::endl;

		geometry_msgs::Point Centroid_XYZ = *Centroid; 
		static const std::string PLANNING_GROUP = "manipulator";
        moveit::planning_interface::MoveGroupInterface move_group(PLANNING_GROUP);

		// We will use the :planning_scene_interface:`PlanningSceneInterface` ee_link
		// class to add and remove collision objects in our "virtual world" scene
		moveit::planning_interface::PlanningSceneInterface planning_scene_interface;
 		moveit::planning_interface::MoveGroupInterface::Plan my_plan;

		//add rviz tools
		namespace rvt = rviz_visual_tools;
		moveit_visual_tools::MoveItVisualTools visual_tools("ur5");
		visual_tools.deleteAllMarkers();

		visual_tools.loadRemoteControl();

		Eigen::Affine3d text_pose = Eigen::Affine3d::Identity();
 		text_pose.translation().z() = 1.75;
		visual_tools.publishText(text_pose, "MoveGroupInterface Demo", rvt::WHITE, rvt::XLARGE);


		//add test collision box
		moveit_msgs::CollisionObject collision_object;
		collision_object.header.frame_id = move_group.getPlanningFrame();
		collision_object.id = "box1";
		//specify box size
		shape_msgs::SolidPrimitive primitive;
		primitive.type = primitive.BOX;
		primitive.dimensions.resize(3);
		primitive.dimensions[0] = 2;
		primitive.dimensions[1] = 2;
		primitive.dimensions[2] = 0.1;
		//specify box position/orientation
		geometry_msgs::Pose box_pose;
  		box_pose.orientation.w = 1.0;
		box_pose.position.x = 0;
  		box_pose.position.y = 0;
  		box_pose.position.z = -0.05;

		//add box to collision object
		collision_object.primitives.push_back(primitive);
		collision_object.primitive_poses.push_back(box_pose);
		collision_object.operation = collision_object.ADD;
		//add box collision object to vector of Collision Objects
		std::vector<moveit_msgs::CollisionObject> collision_objects;
		collision_objects.push_back(collision_object);
		//add vector of collision bjects to the "world"
		sleep(2);
		planning_scene_interface.addCollisionObjects(collision_objects);

		move_group.setStartStateToCurrentState();

		geometry_msgs::Pose target_pose1 = move_group.getCurrentPose().pose;
		//target_pose1.orientation.x = 0;
		
		target_pose1.position.z = Centroid_XYZ.z + 0.25;
		target_pose1.position.y = Centroid_XYZ.y;
		target_pose1.position.x = Centroid_XYZ.x;
		

		ROS_INFO_NAMED("tutorial", "Current Pose After move x:%f y:%f z:%f w:%f", move_group.getCurrentPose().pose.position.x, move_group.getCurrentPose().pose.position.y, move_group.getCurrentPose().pose.position.z, move_group.getCurrentPose().pose.orientation.w );

	 	move_group.setPoseTarget(target_pose1);

		move_group.plan(my_plan);

		visual_tools.publishText(text_pose, "Add object", rvt::WHITE, rvt::XLARGE);
  		visual_tools.trigger();

  		// Wait for MoveGroup to recieve and process the collision object message
		visual_tools.prompt("Press 'next' in the RvizVisualToolsGui window to move to position");

		move_group.move();

		target_pose1.position.z -= 0.1;

	 	move_group.setPoseTarget(target_pose1);		
		move_group.move();


		//back to home
		target_pose1.position.z = 0.6;
		target_pose1.position.y = 0.5;
		target_pose1.position.x = -0.5;

	 	move_group.setPoseTarget(target_pose1);

		move_group.plan(my_plan);
		visual_tools.publishText(text_pose, "Add object", rvt::WHITE, rvt::XLARGE);
  		visual_tools.trigger();
		visual_tools.prompt("Press 'next' in the RvizVisualToolsGui window to move back");

		move_group.move();
}


int main(int argc, char** argv)
{
	//sleep(10);
	ros::init(argc, argv, "move_robot");
	ros::NodeHandle node_handle;
	ros::Subscriber sub = node_handle.subscribe ("output_point", 1, &Move_ur5);

  ros::spin ();
  return 0; 

}